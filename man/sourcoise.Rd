% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sourcoise.R
\name{sourcoise}
\alias{sourcoise}
\title{sources code and caches results}
\usage{
sourcoise(
  path,
  args = list(),
  track = list(),
  lapse = getOption("sourcoise.lapse"),
  force_exec = getOption("sourcoise.force_exec"),
  prevent_exec = getOption("sourcoise.prevent_exec"),
  metadata = getOption("sourcoise.metadata"),
  wd = getOption("sourcoise.wd"),
  src_in = getOption("sourcoise.src_in"),
  exec_wd = NULL,
  root = NULL,
  quiet = FALSE,
  nocache = FALSE,
  log = getOption("sourcoise.log"),
  grow_cache = getOption("sourcoise.grow_cache"),
  limit_mb = getOption("sourcoise.limit_mb")
)
}
\arguments{
\item{path}{(character) le chemin vers le code à exécuter (sans extension .r ou .R ou avec au choix), ce chemin doit être relatif au projet (voir détails)}

\item{args}{(list) une liste d'arguments que l'on peut utliser dans source (args$xxx)}

\item{track}{(list) une liste de fichiers (suivant la même règle que src pour les trouver) qui déclenchent l'exécution.}

\item{lapse}{(character) peut être "never" (défaut) "x hours", "x days", "x weeks", "x months", "x quarters", "x years"}

\item{force_exec}{(boléen) Si TRUE alors le code est exécuté.}

\item{prevent_exec}{(boléen) Si TRUE alors le code n'est pas exécuté, ce flag est prioritaire sur les autres, sauf si il n'y a pas de données en cache}

\item{metadata}{(boléen) Si TRUE (FALSE par défaut) la fonction retourne une liste avec des métadonnées et le champ data qui contient les données elles même}

\item{wd}{(character) si 'project' assure que le wd est le root du project, si 'file' (défaut) c'est le fichier sourcé qui est le wd, si "qmd", c'est le qmd qui appelle}

\item{src_in}{(character) si "project" cherche le source dans le projet puis les sous dossiers, si "file" cherche dans le dossier du qmd (ou le wd). Dans ce cas, les données sont stockées dans le dossier en question.}

\item{exec_wd}{(character) NULL par défaut sauf usage particulier}

\item{root}{(character) force le root (usage non recommandé)}

\item{quiet}{(boléen) pas de messages}

\item{nocache}{(boléen) n'enregistre pas le cache même si nécessaire}

\item{log}{("OFF" par défaut) niveau de cache (voir \code{logger::log_treshold()})}

\item{grow_cache}{(5 par défaut) stratégie de cache}

\item{limit_mb}{(50 par défaut) limite le fichier de données à x mb (pour github). Si au dessus de la limite, \strong{pas de cache}.}
}
\value{
data (list ou ce que le code retourne)
}
\description{
\code{sourcoise()} is used as a drop in replacement for \code{base::source()} but caches results on disk. Cache is persistant.
}
\details{
However, there are some minor differences. First, the script called in \code{sourcoise()} must end by a \code{return()} or by an object returned.
Second, the script is always executed in a local environment, and the working directory is changed to be the one of the script.
Third, an heuristic is applied to find the script, evnt is the path given is incomplete. The closer to the working directory at the moment of the call will be prefered.
Fourth, in cas of an error is triggered by the script, \code{sourcoise()} does not fail and return the error, except if cached data is found and returned. In any case, the error is logged.

Cache is invalidated when :
1 -   a cache is not found
2 -   the script has been modified
3 -   tracked files have been modified
4 -   last execution occurred a certan time ago and is considered as experied
5 -   execution is forced

Si le paramètre \code{src_in} est \code{"file"}, alors le source est cherché à partir du qmd (ou du wd si il n'y pas qmd) et les données sont stockées à ce niveau.
Ce cas correspond donc à des dossiers qui ne partagent pas de code (i.e. le blog de l'OFCE), alors que l'autre cas correspond à des codes pouvant être partagés (la prévision)

Le code est execute (dans un environnement local) et le resultat est mis en cache. Il est important que le code se termine par un return(les_donnees).
le code est exécuté avec un contrôle d'erreur, donc si il bloque, "NULL" est renvoyé, mais sans erreur ni arrêt.
les appels suivants seront plus rapides et sans erreur (sauf si l'erreur n'est pas corrigée).

Une modification du code est détectée, invalide le cache et déclenche l'éxécution si sourcoise est exécutée.

Suivant le paramètre lapse on peut déclencher une exécution périodique.
Par exemple, pour ne pas rater une MAJ, on peut mettre \code{lapse = "1 day"} ou \code{"day"} et une fois par jour le code sera exécuté.
Cela permet d'éviter une exécution à chaque rendu, mais permet de vérifier fréquemment la MAJ.
On peut spécifier l'intervalle en heures (\code{hours}), en jours (\code{days}), en semaines (\code{weeks}), en mois (\code{months}) ou en trimestres (\code{quarters}).

Des métadonnées peuvent être renvoyées (paramètre \code{metadata}) avec la date de la dernière exécution (\verb{$date}), le temps d'exécution (\verb{$timing}),
la taille des données (\verb{$size}), le chemin de la source (\verb{$where}), le hash du source (\verb{$hash_src}) et bien sûr les données (\verb{$data}).
Cela peut servir pour renseigner un graphique.

Le paramètre \code{wd} perment de spécifier le répertoire d'exécution du source.
Si il est mis à \code{"file"}, les appels à l'intérieur du code source, comme par exemple un save ou un load seront compris dans le répertoire où se trouve le fichier source.
L'intérêt est que le code peut avoir des éléments persistants, locaux
L'alternative est d'utiliser \code{wd="project"} auquel cas, le répertoire d'exécution sera independant de l'endroit où est appelé le code source.
Les éléments persistants peuvent alors être dasn un endroit commun et le code peut appeler des éléments persistants d'autres codes sources.
En le mettant à \code{qmd}l'exécution part du fichier qmd, ce qui est le comportement standard de \code{quarto}.
Toute autre valeur pour wd laisse le working directory inchnagé et donc dépendant du contexte d'exécution. Pour ceux qui aiment l'incertitude.

En donnant des fichers à suivre par \code{track}, on peut déclencher l'exécution du source lorsque ces fichiers sont modifiés, c'est utile pour des fichiers sources sous excel (ou csv).
}
\seealso{
Other sourcoise: 
\code{\link{sourcoise_clear}()},
\code{\link{sourcoise_refresh}()},
\code{\link{sourcoise_reset}()},
\code{\link{sourcoise_status}()}
}
\concept{sourcoise}
